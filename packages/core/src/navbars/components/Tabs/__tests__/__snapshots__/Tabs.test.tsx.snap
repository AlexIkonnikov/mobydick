// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tabs render correctly 1`] = `
<View
  style={
    Object {
      "flexDirection": "row",
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "alignItems": "center",
          "paddingHorizontal": 60,
          "paddingVertical": 24,
        },
        undefined,
      ]
    }
    data={
      Array [
        Object {
          "label": "1",
          "value": 1,
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={false}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "maxWidth": "100%",
        },
        undefined,
      ]
    }
    viewabilityConfigCallbackPairs={Array []}
  >
    <View>
      <View
        onLayout={[Function]}
        style={
          Array [
            Object {
              "flexDirection": "row",
            },
            null,
          ]
        }
      >
        <View
          accessibilityLabel="tab"
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#D1D4DB",
              "borderRadius": 24,
              "marginRight": 24,
              "opacity": 1,
              "paddingHorizontal": 36,
              "paddingVertical": 18,
            }
          }
        >
          <Text
            allowFontScaling={true}
            style={
              Array [
                Object {
                  "color": "#5E6678",
                  "fontFamily": "Inter-Regular",
                  "fontSize": 42,
                  "lineHeight": 54,
                },
                undefined,
              ]
            }
          >
            1
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`Tabs render correctly with props 1`] = `
<View
  style={
    Object {
      "flexDirection": "row",
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "alignItems": "center",
          "paddingHorizontal": 60,
          "paddingVertical": 24,
        },
        Object {
          "flex": 1,
        },
      ]
    }
    data={
      Array [
        Object {
          "label": "1",
          "value": 1,
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={false}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "maxWidth": "100%",
        },
        Object {
          "flex": 2,
        },
      ]
    }
    viewabilityConfigCallbackPairs={Array []}
  >
    <View>
      <View
        onLayout={[Function]}
        style={
          Array [
            Object {
              "flexDirection": "row",
            },
            null,
          ]
        }
      >
        <View
          accessibilityLabel="tab"
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#000",
              "borderRadius": 24,
              "marginRight": 24,
              "opacity": 1,
              "paddingHorizontal": 36,
              "paddingVertical": 18,
            }
          }
        >
          <Text
            allowFontScaling={true}
            style={
              Array [
                Object {
                  "color": "#F54D3D",
                  "fontFamily": "Inter-Regular",
                  "fontSize": 84,
                  "lineHeight": 96,
                },
                undefined,
              ]
            }
          >
            1
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
